import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
from data_clean import data


# -*- coding: utf-8 -*-
"""Exportar Vendas de Supermercado - Gallego

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lF2fwdR2h1U8sQYZlr3bd5ehiOYazS3J

## Leitura do dataset e limpeza inicial de dados
"""

#Leitura do Dataset limpo
gallego_data = data.copy()

"""## Análises temporais"""

#Cricação de variáveis.

gallego_data_temporal = gallego_data.copy()
gallego_data_temporal2 = gallego_data.copy()
gallego_data_temporal3 = gallego_data.copy()
year = gallego_data_temporal['Date'].apply(lambda x: x.year)

month = gallego_data_temporal['Date'].apply(lambda x: x.month)

"""## Exposição dos dados"""

meses = gallego_data_temporal.groupby(gallego_data_temporal['Datetime'].dt.to_period('M'))
vendas_mensal = meses.size()

mes1 = vendas_mensal['2019-01']
mes2 = vendas_mensal['2019-02']
mes3 = vendas_mensal['2019-03']

# Criando um DataFrame com os dados de vendas mensais
dados_vendas = {'Mês': ['2019-01', '2019-02', '2019-03'],
                'Vendas': [mes1, mes2, mes3]}

# Convertendo em DataFrame
df_vendas = pd.DataFrame(dados_vendas)

# Gerando o gráfico de barras com Plotly Express
fig = px.bar(df_vendas, x='Mês', y='Vendas', title='Vendas por Mês', labels={'Mês': 'Mês', 'Vendas': 'Vendas (quantidade)'})

# Customizando a cor das barras e o layout
fig.update_traces(marker_color='blue')
fig.update_layout(
    title={'text': 'Vendas por Mês', 'x': 0.5, 'xanchor': 'center'},
    xaxis_tickvals=['2019-01', '2019-02', '2019-03'],  # Mostrar apenas esses valores no eixo x
    xaxis_ticktext=['2019-01', '2019-02', '2019-03'],  # Substituir os rótulos pelas datas corretas
    xaxis_tickangle=0,  # Colocar os rótulos na posição horizontal
    yaxis_title='Vendas(quantidade)',
    xaxis_title='Mês',
    font=dict(size=14),
    plot_bgcolor='white',
    yaxis=dict(showgrid=True, gridcolor='lightgray', gridwidth=1, griddash='dash')  # Linhas de grade tracejadas
)


fig.show()

segmento_mensal = gallego_data_temporal2.groupby([gallego_data_temporal2['Datetime'].dt.to_period('M'), gallego_data_temporal2['Product line']]).size().unstack(fill_value=0)
segmento_mensal

#Grafico segmento de cliente

gallego_data_temporal2['Month'] = gallego_data_temporal2['Datetime'].dt.to_period('M').astype(str)
segmento_mensal = gallego_data_temporal2.groupby(['Month', 'Product line']).size().reset_index(name='Vendas')

# Definindo as cores
cores = {'Electronic accessories': 'green', 'Fashion accessories': 'magenta', 'Food and beverages': 'orange', 'Health and beauty': 'yellow', 'Home and lifestyle': 'blue', 'Sports and travel': 'brown'}

# Criando o gráfico
fig = px.bar(segmento_mensal,
             x='Month',
             y='Vendas',
             color='Product line',
             barmode='group',
             color_discrete_map=cores,
             title='Vendas por Mês por Segmento')

fig.update_layout(xaxis_title='Mês', yaxis_title='Vendas (quantidade)', legend_title_text='Segmento',    xaxis_tickvals=['2019-01', '2019-02', '2019-03'],xaxis_ticktext=['2019-01', '2019-02', '2019-03'],xaxis_tickangle=0)
fig.show()

#Grafico rating cidade

rating_cidade = gallego_data_temporal3.groupby('City')['Rating'].mean().reset_index()


fig = px.bar(rating_cidade, x='City', y='Rating', color_discrete_sequence=['blue'])
fig.update_layout(
    title='Rating por Cidade',
    xaxis_title='Cidade',
    yaxis_title='Rating'
)

fig.show()
rating_cidade

"""# Transformar qualitativas em quantitativas"""

from sklearn.preprocessing import LabelEncoder

#Transformar qualitativas em quantitativas
le = LabelEncoder()
qualitativas = ['Gender', 'Product line', 'Payment', 'City', 'Customer type']
for var in qualitativas:
  gallego_data[var] = le.fit_transform(gallego_data[var])

gallego_data.head(5)

#Análise dos clientes que mais gastam.
gallego_data_clientes = gallego_data.copy()

gallego_q3 = gallego_data_clientes['Total'].quantile(0.75)
gallego_quartil_quatro = gallego_data_clientes[gallego_data_clientes['Total'] > gallego_q3]
gallego_media_q4 = gallego_quartil_quatro['Total'].mean()

gallego_grouped1 = gallego_quartil_quatro.groupby('Customer type')['Total'].sum()

#Grafico tipo de cliente

# Calcular a soma do Total por Tipo de Cliente
gallego_grouped1 = gallego_quartil_quatro.groupby('Customer type')['Total'].sum().reset_index()

# Criar o gráfico de barras
fig = px.bar(gallego_grouped1, x='Customer type', y='Total', color_discrete_sequence=['blue'])

# Adicionar título e rótulos aos eixos
fig.update_layout(
    title='Quantidade por Tipo de Cliente (4º Quartil)',
    xaxis_title='Tipo de Cliente',
    yaxis_title='Total'
)

# Mostrar o gráfico
fig.show()

#Grafico Homem e Mulher

# Filtrando os dados
gallego_customer_normal_quartil = gallego_quartil_quatro[gallego_quartil_quatro['Customer type'] == 'Normal']

# Agrupando e somando os totais
gallego_grouped2 = gallego_customer_normal_quartil.groupby(['City', 'Gender'])['Total'].sum().reset_index()

#Cores
color_discrete_map = {'Male': 'blue', 'Female': 'red'}
# Criando o gráfico de barras empilhadas
fig = px.bar(gallego_grouped2, x='City', y='Total', color='Gender', title='Quantidade por Gênero e Cidade (4º Quartil)', labels={'City': 'Cidade', 'Total': 'Total'}, color_discrete_map=color_discrete_map)

# Exibindo o gráfico
fig.show()